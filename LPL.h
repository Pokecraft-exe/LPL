#pragma once
#include "property.h"
#include <iostream>
#include <fstream>
#include <exception>
#include <sstream>
#include <map>
#include <vector>

#define sHEADER "\
@pragma once\n\
#include <string>\n\
#include <vector>\n\
#include <map>\n\
#include \"LPL.h\"\n\
  /**********************************/\n\
 /* Code generated by LPL compiler */\n\
/**********************************/\n\
std::vector<std::string> LPLtokenize(std::string str, bool pushSpace = true);\n\
std::vector<std::vector<std::string>> LPLtokenize(std::vector<std::string> str);\n"

#define sRESULT_STRUCT "\tusing identification_result = struct __result__{\n\
\t\tvariable * result;\n\
\t\tbool success;\n\
\t\t__result__() {};\n\
\t};\n"

std::string slurp(std::ifstream& in);
std::string ReplaceAll(std::string str, const std::string& from, const std::string& to);

typedef std::map<std::string, std::vector<std::map<std::string, std::string>>> LPLresult;

class LPL {
public:
	std::ifstream file;
	std::vector<std::string> schemes = {};
	std::map<std::string, std::vector<property>> properties = {};
	std::map<std::string, std::vector<std::string>> definitions = {};
	std::map<std::string, std::string> patterns = {};
private:
	void loadProperties();
	std::string identify(std::string scheme);

public:
	bool loadScript(std::string fileToRead);
	void compileAll();
	void compileScheme(std::string scheme);
	
};